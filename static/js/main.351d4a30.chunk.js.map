{"version":3,"sources":["components/QrReader.js","App.js","serviceWorker.js","index.js"],"names":["QrReader","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoElement","React","createRef","canvasElement","canvas","state","ready","loadingMessage","codeFound","qrCodeValue","inherits","createClass","key","value","_this2","current","getContext","navigator","mediaDevices","getUserMedia","video","facingMode","then","stream","srcObject","play","requestAnimationFrame","tick","begin","end","beginPath","moveTo","x","y","lineTo","lineWidth","strokeStyle","stroke","_this3","setState","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","drawLine","location","topLeftCorner","topRightCorner","bottomRightCorner","bottomLeftCorner","react_default","a","createElement","id","href","String","className","ref","playsInline","Component","App","QrReader_QrReader","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.351d4a30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./QrReader.scss\";\nimport jsQR from \"jsqr\";\n\n// https://reactjs.org/docs/refs-and-the-dom.html\n\nexport class QrReader extends Component {\n  constructor(props) {\n    super(props);\n\n    // create a ref to store the video DOM element\n    this.videoElement = React.createRef();\n    // create a ref to store the canvas DOM element\n    this.canvasElement = React.createRef();\n\n    this.canvas = null;\n\n    this.state = {\n      ready: false,\n      loadingMessage:\n        \"ðŸŽ¥ Unable to access video stream (please make sure you have a webcam enabled)\",\n      codeFound: false,\n      qrCodeValue: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.canvas = this.canvasElement.current.getContext(\"2d\");\n    navigator.mediaDevices\n      .getUserMedia({ video: { facingMode: \"environment\" } })\n      .then(stream => {\n        this.videoElement.current.srcObject = stream;\n        this.videoElement.current.play();\n        /* https://developer.mozilla.org/fr/docs/Web/API/Window/requestAnimationFrame */\n        requestAnimationFrame(() => this.tick());\n      });\n  }\n\n  drawLine(begin, end) {\n    this.canvas.beginPath();\n    this.canvas.moveTo(begin.x, begin.y);\n    this.canvas.lineTo(end.x, end.y);\n    this.canvas.lineWidth = 4;\n    this.canvas.strokeStyle = \"#FF3B58\";\n    this.canvas.stroke();\n  }\n\n  tick() {\n    this.setState({ loadingMessage: \"âŒ› Loading video...\" });\n    if (\n      this.videoElement.current.readyState ===\n      this.videoElement.current.HAVE_ENOUGH_DATA\n    ) {\n      this.setState({ ready: true });\n    }\n    this.canvasElement.current.height = this.videoElement.current.videoHeight;\n    this.canvasElement.current.width = this.videoElement.current.videoWidth;\n    /* affiche l'image de la balise <video> */\n    this.canvas.drawImage(\n      this.videoElement.current,\n      0,\n      0,\n      this.canvasElement.current.width,\n      this.canvasElement.current.height\n    );\n\n    if (\n      this.canvasElement.current.width > 0 &&\n      this.canvasElement.current.height > 0\n    ) {\n      var imageData = this.canvas.getImageData(\n        0,\n        0,\n        this.canvasElement.current.width,\n        this.canvasElement.current.height\n      );\n      var code = jsQR(imageData.data, imageData.width, imageData.height, {\n        inversionAttempts: \"dontInvert\"\n      });\n      if (code) {\n        this.drawLine(\n          code.location.topLeftCorner,\n          code.location.topRightCorner\n        );\n        this.drawLine(\n          code.location.topRightCorner,\n          code.location.bottomRightCorner\n        );\n        this.drawLine(\n          code.location.bottomRightCorner,\n          code.location.bottomLeftCorner\n        );\n        this.drawLine(\n          code.location.bottomLeftCorner,\n          code.location.topLeftCorner\n        );\n        this.setState({ codeFound: true });\n        this.setState({ qrCodeValue: code.data });\n      } else {\n        this.setState({ codeFound: false });\n      }\n    }\n\n    requestAnimationFrame(() => this.tick());\n  }\n\n  render() {\n    return (\n      <div id=\"main-qr\">\n        <h1>jsQr Demo</h1>\n        <a id=\"githubLink\" href=\"https://github.com/cozmo/jsQR\">\n          View documentation on Github\n        </a>\n        <p>\n          Pure JavaScript QR code decoding library. Ready{\" \"}\n          {String(this.state.ready)}\n        </p>\n        <div id=\"loading-message\" className={this.state.ready ? \"hidden\" : \"\"}>\n          {this.state.loadingMessage}\n        </div>\n        <canvas\n          ref={this.canvasElement}\n          id=\"canvas\"\n          className={this.state.ready ? \"\" : \"hidden\"}\n        />\n        <div id=\"output\" className={this.state.ready ? \"\" : \"hidden\"}>\n          <div\n            id=\"outputMessage\"\n            className={this.state.codeFound ? \"hidden\" : \"\"}\n          >\n            No QR code detected.\n          </div>\n          <div className={this.state.codeFound ? \"\" : \"hidden\"}>\n            <b>Data:</b> <span id=\"outputData\">{this.state.qrCodeValue}</span>\n          </div>\n        </div>\n        {/* playsinline required to tell iOS safari we don't want fullscreen */}\n        <video ref={this.videoElement} playsInline={true} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport { QrReader } from './components/QrReader'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <QrReader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}